package JFrames;

import Cycles.CycleGenerators.CycleGenerator;
import OSRSDatabase.ItemDB;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;

public class AIOActivityMenu implements OSRSForm
{
    // populate Jlist based on Skill tag filter
    private final EnumMap<ItemDB.Skill, CycleGeneratorConfiguration> GeneratorMap  = new EnumMap<>(
            ItemDB.Skill.class);
    public        JPanel                                             DetailPanel;
    public        JScrollPane                                        Activities;
    public        Map<ItemDB.Skill, JLabel>                          SkillLabelMap = new HashMap<>();
    private       JPanel                                             Main;
    private       JList                                              list1;
    private       JPanel                                             SkillPanel;
    private       JLabel                                             AttackLabel;
    private       JLabel                                             StrengthLabel;
    private       JLabel                                             DefenseLabel;
    private       JLabel                                             RangedLabel;
    private       JLabel                                             PrayerLabel;
    private       JLabel                                             MagicLabel;
    private       JLabel                                             RunecraftingLabel;
    private       JLabel                                             ConstructionLabel;
    private       JLabel                                             HPLabel;
    private       JLabel                                             AgilityLabel;
    private       JLabel                                             HerbloreLabel;
    private       JLabel                                             ThievingLabel;
    private       JLabel                                             CraftingLabel;
    private       JLabel                                             FletchingLabel;
    private       JLabel                                             SlayerLabel;
    private       JLabel                                             HunterLabel;
    private       JLabel                                             MiningLabel;
    private       JLabel                                             SmithingLabel;
    private       JLabel                                             FishingLabel;
    private       JLabel                                             CookingLabel;
    private       JLabel                                             FiremakingLabel;
    private       JLabel                                             WoodcuttingLabel;
    private       JLabel                                             FarmingLabel;

    public AIOActivityMenu()
    {
        $$$setupUI$$$();
        SkillLabelMap.put(ItemDB.Skill.ATTACK, AttackLabel);
        AttackLabel.addMouseListener(new SkillLabelMouseAdapter());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        Main = new JPanel();
        Main.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        Main.setBackground(new Color(-13947600));
        Main.setForeground(new Color(-13947600));
        Main.setOpaque(true);
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setBackground(new Color(-13947600));
        splitPane1.setContinuousLayout(false);
        splitPane1.setDividerSize(0);
        splitPane1.setEnabled(false);
        splitPane1.setFocusable(true);
        Main.add(splitPane1,
                 new GridConstraints(0,
                                     0,
                                     1,
                                     1,
                                     GridConstraints.ANCHOR_WEST,
                                     GridConstraints.FILL_VERTICAL,
                                     GridConstraints.SIZEPOLICY_FIXED,
                                     GridConstraints.SIZEPOLICY_FIXED,
                                     null,
                                     new Dimension(1000, 600),
                                     null,
                                     0,
                                     false));
        SkillPanel = new JPanel();
        SkillPanel.setLayout(new GridBagLayout());
        SkillPanel.setAlignmentX(1.0f);
        SkillPanel.setAlignmentY(1.0f);
        SkillPanel.setAutoscrolls(false);
        SkillPanel.setDoubleBuffered(true);
        SkillPanel.setEnabled(true);
        SkillPanel.setFocusable(true);
        SkillPanel.setForeground(new Color(-16777216));
        SkillPanel.setMinimumSize(new Dimension(300, 300));
        SkillPanel.setOpaque(false);
        SkillPanel.setRequestFocusEnabled(true);
        splitPane1.setLeftComponent(SkillPanel);
        AttackLabel = new JLabel();
        AttackLabel.setAlignmentX(0.5f);
        AttackLabel.setBackground(new Color(-13947600));
        AttackLabel.setDoubleBuffered(false);
        AttackLabel.setEnabled(true);
        AttackLabel.setFocusCycleRoot(false);
        Font AttackLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, AttackLabel.getFont());
        if(AttackLabelFont != null) {AttackLabel.setFont(AttackLabelFont);}
        AttackLabel.setForeground(new Color(-65536));
        AttackLabel.setHorizontalAlignment(0);
        AttackLabel.setHorizontalTextPosition(0);
        AttackLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Attack_icon_(detail).png")));
        AttackLabel.setOpaque(true);
        AttackLabel.setText("1");
        GridBagConstraints gbc;
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(AttackLabel, gbc);
        StrengthLabel = new JLabel();
        StrengthLabel.setBackground(new Color(-13947600));
        StrengthLabel.setDoubleBuffered(false);
        StrengthLabel.setEnabled(true);
        StrengthLabel.setFocusCycleRoot(false);
        Font StrengthLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, StrengthLabel.getFont());
        if(StrengthLabelFont != null) {StrengthLabel.setFont(StrengthLabelFont);}
        StrengthLabel.setForeground(new Color(-65536));
        StrengthLabel.setHorizontalAlignment(0);
        StrengthLabel.setHorizontalTextPosition(0);
        StrengthLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Strength_icon_(detail).png")));
        StrengthLabel.setOpaque(true);
        StrengthLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(StrengthLabel, gbc);
        DefenseLabel = new JLabel();
        DefenseLabel.setBackground(new Color(-13947600));
        DefenseLabel.setDoubleBuffered(false);
        DefenseLabel.setEnabled(true);
        DefenseLabel.setFocusCycleRoot(false);
        Font DefenseLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, DefenseLabel.getFont());
        if(DefenseLabelFont != null) {DefenseLabel.setFont(DefenseLabelFont);}
        DefenseLabel.setForeground(new Color(-65536));
        DefenseLabel.setHorizontalAlignment(0);
        DefenseLabel.setHorizontalTextPosition(0);
        DefenseLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Defence_icon_(detail).png")));
        DefenseLabel.setOpaque(true);
        DefenseLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(DefenseLabel, gbc);
        RangedLabel = new JLabel();
        RangedLabel.setBackground(new Color(-13947600));
        RangedLabel.setDoubleBuffered(false);
        RangedLabel.setEnabled(true);
        RangedLabel.setFocusCycleRoot(false);
        Font RangedLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, RangedLabel.getFont());
        if(RangedLabelFont != null) {RangedLabel.setFont(RangedLabelFont);}
        RangedLabel.setForeground(new Color(-65536));
        RangedLabel.setHorizontalAlignment(0);
        RangedLabel.setHorizontalTextPosition(0);
        RangedLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Ranged icon (detail).png")));
        RangedLabel.setOpaque(true);
        RangedLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(RangedLabel, gbc);
        PrayerLabel = new JLabel();
        PrayerLabel.setBackground(new Color(-13947600));
        PrayerLabel.setDoubleBuffered(false);
        PrayerLabel.setEnabled(true);
        PrayerLabel.setFocusCycleRoot(false);
        Font PrayerLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, PrayerLabel.getFont());
        if(PrayerLabelFont != null) {PrayerLabel.setFont(PrayerLabelFont);}
        PrayerLabel.setForeground(new Color(-65536));
        PrayerLabel.setHorizontalAlignment(0);
        PrayerLabel.setHorizontalTextPosition(0);
        PrayerLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Prayer_icon_(detail).png")));
        PrayerLabel.setOpaque(true);
        PrayerLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(PrayerLabel, gbc);
        MagicLabel = new JLabel();
        MagicLabel.setBackground(new Color(-13947600));
        MagicLabel.setDoubleBuffered(false);
        MagicLabel.setEnabled(true);
        MagicLabel.setFocusCycleRoot(false);
        Font MagicLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, MagicLabel.getFont());
        if(MagicLabelFont != null) {MagicLabel.setFont(MagicLabelFont);}
        MagicLabel.setForeground(new Color(-65536));
        MagicLabel.setHorizontalAlignment(0);
        MagicLabel.setHorizontalTextPosition(0);
        MagicLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Magic icon (detail).png")));
        MagicLabel.setOpaque(true);
        MagicLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(MagicLabel, gbc);
        HPLabel = new JLabel();
        HPLabel.setBackground(new Color(-13947600));
        HPLabel.setDoubleBuffered(false);
        HPLabel.setEnabled(true);
        HPLabel.setFocusCycleRoot(false);
        Font HPLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, HPLabel.getFont());
        if(HPLabelFont != null) {HPLabel.setFont(HPLabelFont);}
        HPLabel.setForeground(new Color(-65536));
        HPLabel.setHorizontalAlignment(0);
        HPLabel.setHorizontalTextPosition(0);
        HPLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Hitpoints_icon_(detail).png")));
        HPLabel.setOpaque(true);
        HPLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(HPLabel, gbc);
        AgilityLabel = new JLabel();
        AgilityLabel.setBackground(new Color(-13947600));
        AgilityLabel.setDoubleBuffered(false);
        AgilityLabel.setEnabled(true);
        AgilityLabel.setFocusCycleRoot(false);
        Font AgilityLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, AgilityLabel.getFont());
        if(AgilityLabelFont != null) {AgilityLabel.setFont(AgilityLabelFont);}
        AgilityLabel.setForeground(new Color(-65536));
        AgilityLabel.setHorizontalAlignment(0);
        AgilityLabel.setHorizontalTextPosition(0);
        AgilityLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Agility_icon_(detail).png")));
        AgilityLabel.setOpaque(true);
        AgilityLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(AgilityLabel, gbc);
        HerbloreLabel = new JLabel();
        HerbloreLabel.setBackground(new Color(-13947600));
        HerbloreLabel.setDoubleBuffered(false);
        HerbloreLabel.setEnabled(true);
        HerbloreLabel.setFocusCycleRoot(false);
        Font HerbloreLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, HerbloreLabel.getFont());
        if(HerbloreLabelFont != null) {HerbloreLabel.setFont(HerbloreLabelFont);}
        HerbloreLabel.setForeground(new Color(-65536));
        HerbloreLabel.setHorizontalAlignment(0);
        HerbloreLabel.setHorizontalTextPosition(0);
        HerbloreLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Herblore_icon_(detail).png")));
        HerbloreLabel.setOpaque(true);
        HerbloreLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(HerbloreLabel, gbc);
        ThievingLabel = new JLabel();
        ThievingLabel.setBackground(new Color(-13947600));
        ThievingLabel.setDoubleBuffered(false);
        ThievingLabel.setEnabled(true);
        ThievingLabel.setFocusCycleRoot(false);
        Font ThievingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, ThievingLabel.getFont());
        if(ThievingLabelFont != null) {ThievingLabel.setFont(ThievingLabelFont);}
        ThievingLabel.setForeground(new Color(-65536));
        ThievingLabel.setHorizontalAlignment(0);
        ThievingLabel.setHorizontalTextPosition(0);
        ThievingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Thieving_icon_(detail).png")));
        ThievingLabel.setOpaque(true);
        ThievingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(ThievingLabel, gbc);
        CraftingLabel = new JLabel();
        CraftingLabel.setBackground(new Color(-13947600));
        CraftingLabel.setDoubleBuffered(false);
        CraftingLabel.setEnabled(true);
        CraftingLabel.setFocusCycleRoot(false);
        Font CraftingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, CraftingLabel.getFont());
        if(CraftingLabelFont != null) {CraftingLabel.setFont(CraftingLabelFont);}
        CraftingLabel.setForeground(new Color(-65536));
        CraftingLabel.setHorizontalAlignment(0);
        CraftingLabel.setHorizontalTextPosition(0);
        CraftingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Crafting icon (detail).png")));
        CraftingLabel.setOpaque(true);
        CraftingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(CraftingLabel, gbc);
        FletchingLabel = new JLabel();
        FletchingLabel.setBackground(new Color(-13947600));
        FletchingLabel.setDoubleBuffered(false);
        FletchingLabel.setEnabled(true);
        FletchingLabel.setFocusCycleRoot(false);
        Font FletchingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, FletchingLabel.getFont());
        if(FletchingLabelFont != null) {FletchingLabel.setFont(FletchingLabelFont);}
        FletchingLabel.setForeground(new Color(-65536));
        FletchingLabel.setHorizontalAlignment(0);
        FletchingLabel.setHorizontalTextPosition(0);
        FletchingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Fletching_icon_(detail).png")));
        FletchingLabel.setOpaque(true);
        FletchingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(FletchingLabel, gbc);
        RunecraftingLabel = new JLabel();
        RunecraftingLabel.setBackground(new Color(-13947600));
        RunecraftingLabel.setDoubleBuffered(false);
        RunecraftingLabel.setEnabled(true);
        RunecraftingLabel.setFocusCycleRoot(false);
        Font RunecraftingLabelFont = this.$$$getFont$$$(null,
                                                        Font.BOLD,
                                                        36,
                                                        RunecraftingLabel.getFont());
        if(RunecraftingLabelFont != null) {RunecraftingLabel.setFont(RunecraftingLabelFont);}
        RunecraftingLabel.setForeground(new Color(-65536));
        RunecraftingLabel.setHorizontalAlignment(0);
        RunecraftingLabel.setHorizontalTextPosition(0);
        RunecraftingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Runecraft_icon_(detail).png")));
        RunecraftingLabel.setOpaque(true);
        RunecraftingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(RunecraftingLabel, gbc);
        ConstructionLabel = new JLabel();
        ConstructionLabel.setBackground(new Color(-13947600));
        ConstructionLabel.setDoubleBuffered(false);
        ConstructionLabel.setEnabled(true);
        ConstructionLabel.setFocusCycleRoot(false);
        Font ConstructionLabelFont = this.$$$getFont$$$(null,
                                                        Font.BOLD,
                                                        36,
                                                        ConstructionLabel.getFont());
        if(ConstructionLabelFont != null) {ConstructionLabel.setFont(ConstructionLabelFont);}
        ConstructionLabel.setForeground(new Color(-65536));
        ConstructionLabel.setHorizontalAlignment(0);
        ConstructionLabel.setHorizontalTextPosition(0);
        ConstructionLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Construction_icon_(detail).png")));
        ConstructionLabel.setOpaque(true);
        ConstructionLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 7;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(ConstructionLabel, gbc);
        SlayerLabel = new JLabel();
        SlayerLabel.setBackground(new Color(-13947600));
        SlayerLabel.setDoubleBuffered(false);
        SlayerLabel.setEnabled(true);
        SlayerLabel.setFocusCycleRoot(false);
        Font SlayerLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, SlayerLabel.getFont());
        if(SlayerLabelFont != null) {SlayerLabel.setFont(SlayerLabelFont);}
        SlayerLabel.setForeground(new Color(-65536));
        SlayerLabel.setHorizontalAlignment(0);
        SlayerLabel.setHorizontalTextPosition(0);
        SlayerLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Slayer icon (detail).png")));
        SlayerLabel.setOpaque(true);
        SlayerLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(SlayerLabel, gbc);
        HunterLabel = new JLabel();
        HunterLabel.setBackground(new Color(-13947600));
        HunterLabel.setDoubleBuffered(false);
        HunterLabel.setEnabled(true);
        HunterLabel.setFocusCycleRoot(false);
        Font HunterLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, HunterLabel.getFont());
        if(HunterLabelFont != null) {HunterLabel.setFont(HunterLabelFont);}
        HunterLabel.setForeground(new Color(-65536));
        HunterLabel.setHorizontalAlignment(0);
        HunterLabel.setHorizontalTextPosition(0);
        HunterLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Hunter_icon_(detail).png")));
        HunterLabel.setOpaque(true);
        HunterLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 1;
        gbc.gridy   = 7;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(HunterLabel, gbc);
        MiningLabel = new JLabel();
        MiningLabel.setBackground(new Color(-13947600));
        MiningLabel.setDoubleBuffered(false);
        MiningLabel.setEnabled(true);
        MiningLabel.setFocusCycleRoot(false);
        Font MiningLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, MiningLabel.getFont());
        if(MiningLabelFont != null) {MiningLabel.setFont(MiningLabelFont);}
        MiningLabel.setForeground(new Color(-65536));
        MiningLabel.setHorizontalAlignment(0);
        MiningLabel.setHorizontalTextPosition(0);
        MiningLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Mining_icon_(detail).png")));
        MiningLabel.setOpaque(true);
        MiningLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(MiningLabel, gbc);
        SmithingLabel = new JLabel();
        SmithingLabel.setBackground(new Color(-13947600));
        SmithingLabel.setDoubleBuffered(false);
        SmithingLabel.setEnabled(true);
        SmithingLabel.setFocusCycleRoot(false);
        Font SmithingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, SmithingLabel.getFont());
        if(SmithingLabelFont != null) {SmithingLabel.setFont(SmithingLabelFont);}
        SmithingLabel.setForeground(new Color(-65536));
        SmithingLabel.setHorizontalAlignment(0);
        SmithingLabel.setHorizontalTextPosition(0);
        SmithingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Smithing_icon_(detail).png")));
        SmithingLabel.setOpaque(true);
        SmithingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(SmithingLabel, gbc);
        FishingLabel = new JLabel();
        FishingLabel.setBackground(new Color(-13947600));
        FishingLabel.setDoubleBuffered(false);
        FishingLabel.setEnabled(true);
        FishingLabel.setFocusCycleRoot(false);
        Font FishingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, FishingLabel.getFont());
        if(FishingLabelFont != null) {FishingLabel.setFont(FishingLabelFont);}
        FishingLabel.setForeground(new Color(-65536));
        FishingLabel.setHorizontalAlignment(0);
        FishingLabel.setHorizontalTextPosition(0);
        FishingLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Fishing icon (detail).png")));
        FishingLabel.setOpaque(true);
        FishingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(FishingLabel, gbc);
        CookingLabel = new JLabel();
        CookingLabel.setBackground(new Color(-13947600));
        CookingLabel.setDoubleBuffered(false);
        CookingLabel.setEnabled(true);
        CookingLabel.setFocusCycleRoot(false);
        Font CookingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, CookingLabel.getFont());
        if(CookingLabelFont != null) {CookingLabel.setFont(CookingLabelFont);}
        CookingLabel.setForeground(new Color(-65536));
        CookingLabel.setHorizontalAlignment(0);
        CookingLabel.setHorizontalTextPosition(0);
        CookingLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Cooking_icon_(detail).png")));
        CookingLabel.setOpaque(true);
        CookingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(CookingLabel, gbc);
        FiremakingLabel = new JLabel();
        FiremakingLabel.setBackground(new Color(-13947600));
        FiremakingLabel.setDoubleBuffered(false);
        FiremakingLabel.setEnabled(true);
        FiremakingLabel.setFocusCycleRoot(false);
        Font FiremakingLabelFont = this.$$$getFont$$$(null,
                                                      Font.BOLD,
                                                      36,
                                                      FiremakingLabel.getFont());
        if(FiremakingLabelFont != null) {FiremakingLabel.setFont(FiremakingLabelFont);}
        FiremakingLabel.setForeground(new Color(-65536));
        FiremakingLabel.setHorizontalAlignment(0);
        FiremakingLabel.setHorizontalTextPosition(0);
        FiremakingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Firemaking_icon_(detail).png")));
        FiremakingLabel.setOpaque(true);
        FiremakingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(FiremakingLabel, gbc);
        WoodcuttingLabel = new JLabel();
        WoodcuttingLabel.setBackground(new Color(-13947600));
        WoodcuttingLabel.setDoubleBuffered(false);
        WoodcuttingLabel.setEnabled(true);
        WoodcuttingLabel.setFocusCycleRoot(false);
        Font WoodcuttingLabelFont = this.$$$getFont$$$(null,
                                                       Font.BOLD,
                                                       36,
                                                       WoodcuttingLabel.getFont());
        if(WoodcuttingLabelFont != null) {WoodcuttingLabel.setFont(WoodcuttingLabelFont);}
        WoodcuttingLabel.setForeground(new Color(-65536));
        WoodcuttingLabel.setHorizontalAlignment(0);
        WoodcuttingLabel.setHorizontalTextPosition(0);
        WoodcuttingLabel.setIcon(new ImageIcon(getClass().getResource(
                "/icons/Woodcutting_icon_(detail).png")));
        WoodcuttingLabel.setOpaque(true);
        WoodcuttingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(WoodcuttingLabel, gbc);
        FarmingLabel = new JLabel();
        FarmingLabel.setBackground(new Color(-13947600));
        FarmingLabel.setDoubleBuffered(false);
        FarmingLabel.setEnabled(true);
        FarmingLabel.setFocusCycleRoot(false);
        Font FarmingLabelFont = this.$$$getFont$$$(null, Font.BOLD, 36, FarmingLabel.getFont());
        if(FarmingLabelFont != null) {FarmingLabel.setFont(FarmingLabelFont);}
        FarmingLabel.setForeground(new Color(-65536));
        FarmingLabel.setHorizontalAlignment(0);
        FarmingLabel.setHorizontalTextPosition(0);
        FarmingLabel.setIcon(new ImageIcon(getClass().getResource("/icons/Farming_icon_(detail).png")));
        FarmingLabel.setOpaque(true);
        FarmingLabel.setText("1");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 2;
        gbc.gridy   = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill    = GridBagConstraints.BOTH;
        SkillPanel.add(FarmingLabel, gbc);
        DetailPanel = new JPanel();
        DetailPanel.setLayout(new GridBagLayout());
        DetailPanel.setForeground(new Color(-13947600));
        DetailPanel.setOpaque(true);
        splitPane1.setRightComponent(DetailPanel);
        Activities = new JScrollPane();
        Activities.setVerticalScrollBarPolicy(22);
        gbc         = new GridBagConstraints();
        gbc.gridx   = 0;
        gbc.gridy   = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor  = GridBagConstraints.NORTH;
        gbc.fill    = GridBagConstraints.HORIZONTAL;
        DetailPanel.add(Activities, gbc);
        Activities.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(
                -13947600)), "Activities", TitledBorder.LEFT, TitledBorder.ABOVE_TOP, null, null));
        list1.setBackground(new Color(-13947600));
        list1.setForeground(new Color(-16777216));
        Activities.setViewportView(list1);
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont)
    {
        if(currentFont == null) {return null;}
        String resultName;
        if(fontName == null) {resultName = currentFont.getName();}
        else
        {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if(testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;}
            else {resultName = currentFont.getName();}
        }
        Font font = new Font(resultName,
                             style >= 0 ? style : currentFont.getStyle(),
                             size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "")
                              .toLowerCase(Locale.ENGLISH)
                              .startsWith("mac");
        Font fontWithFallback = isMac
                ? new Font(font.getFamily(), font.getStyle(), font.getSize())
                : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource
                ? fontWithFallback
                : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {return Main;}

    private void createUIComponents()
    {
        // TODO: place custom component creation code here
        list1 = new JList<>();
        list1.setListData(new Object[]{new String("test 1"), new String("test 2")});
    }

    class CycleGeneratorConfiguration
    {
        public boolean                  ManualInterference; // basically once the user makes a change to the config, do not auto-update it anymore
        public Future<Boolean>          Enabled;
        public CycleGenerator           Generator;
        public CycleGenerator.CycleData Parameters;

        //TODO make a popup window warning that not all requirements have been updated yet, some cycles might not be valid
        // TODO Auto-update Enabled with a requirement check, each time the user opens a skill tab, maybe something with future, idk
        public CycleGeneratorConfiguration(CycleGenerator generator)
        {
            ManualInterference = false;
            Enabled            = CompletableFuture.supplyAsync(() -> WaitForRequirements(generator.GetRequirements()))
                                                  .whenComplete(AIOActivityMenu.this::Refresh); //TODO should run immediately, but better test out
            Generator          = generator;
            Parameters         = null;
        }

        private boolean WaitForRequirements(Set<CycleGenerator.CycleRequirement> Requirements)
        {
            Set<CycleGenerator.CycleRequirement> temp = new HashSet<>(Requirements);

            boolean AllResolved;
            do
            {
                AllResolved = true;
                for(var Requirement : temp)
                {
                    var result = Requirement.IsRequirementMet();
                    if(!result.isPresent())
                    {
                        AllResolved = false;
                    }
                }
                try
                {
                    Thread.sleep(100);
                } catch(InterruptedException ignored) {}
            }
            while(!AllResolved);

            boolean result = true;
            for(var Requirement : temp)
            {
                result &= Requirement.IsRequirementMet().get();
            }
            return result;
        }

    }

    class SkillLabelMouseAdapter extends MouseAdapter
    {
        @Override
        public void mouseClicked(MouseEvent e)
        {
            System.out.print("Clicked");

            //                var rect = SkillLabelMap.get(ItemDB.Skill.ATTACK).getVisibleRect();
            //                System.out.print(rect);
            //                if(rect.contains(e.getPoint()))
            //                {
            //                    System.out.print("Clicked in rectangle");
            //                    SkillLabelMap.get(ItemDB.Skill.ATTACK).setText("Clicked!");
            //                }
            super.mouseClicked(e);
        }
    }

    private void Refresh(Boolean aBoolean, Throwable throwable) {}

    public static void main(String[] args)
    {
        var form = new AIOActivityMenu();
        FrameUtilities.OpenGui("AIO test", form.GetForm());
    }

    @Override
    public Container GetForm()
    {
        return Main;
    }

}
